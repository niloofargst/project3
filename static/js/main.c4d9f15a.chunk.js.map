{"version":3,"sources":["Components/Sketchpad/sketchpad.module.css","Components/Controls/controls.js","Components/Cell/cell.js","Components/Sketchpad/sketchpad.js","App.js","index.js"],"names":["module","exports","Controls","props","className","colourMode","onClick","setColorMode","cell","style","boxSizing","height","cellSize","width","backgroundColor","bgColour","onMouseEnter","e","setColor","keys","onMouseOver","sketchpad","sketchSize","Math","min","portSize","round","size","divSize","max","grid","pixelData","map","pixel","idx","mouseOver","classes","SketchContainer","Sketchpad","INIT_BG_COLOUR","INIT_PEN_COLOUR","rainbow_colors","App","useState","setColourMode","setPixelData","gridSize","setGridSize","setBgColour","penColour","setPenColour","setMouseOver","window","innerWidth","innerHeight","setPortSize","onresize","initPixelData","colour","newPixelData","Array","i","length","useEffect","setSize","penColor","backgroundColour","newMode","prompt","isNaN","alert","key","preventDefault","floor","random","updatePixelData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,gBAAkB,mCAAmC,UAAY,+B,0KC0DpEC,EAvDE,SAACC,GACd,OACI,gCACI,oBAAIC,UAAS,8CAAb,8BAEA,qBAAKA,UAAS,4CAAd,SACI,qBAAIA,UAAS,yCAAb,UACI,oBAAIA,UAAS,WAAb,SACI,wBACIA,UAAS,qCAAqD,cAArBD,EAAME,WAA6B,SAAW,GAA9E,KAETC,QAAS,WACLH,EAAMI,aAAa,cAJ3B,yBAUJ,oBAAIH,UAAS,WAAb,SACI,wBACIA,UAAS,qCAAqD,YAArBD,EAAME,WAA2B,SAAW,GAA5E,KAETC,QAAS,WACLH,EAAMI,aAAa,YAJ3B,uBAUJ,oBAAIH,UAAS,WAAb,SACI,wBACIA,UAAS,qCAAqD,UAArBD,EAAME,WAAyB,SAAW,GAA1E,KAETC,QAAS,WACLH,EAAMI,aAAa,UAJ3B,qBASJ,oBAAIH,UAAS,WAAb,SACI,wBACIA,UAAS,qCAAqD,UAArBD,EAAME,WAAyB,SAAW,GAA1E,KAETC,QAAS,WACLH,EAAMI,aAAa,UAJ3B,8BC1BTC,EAhBF,SAACL,GACV,OACI,qBACIM,MAAO,CACHC,UAAW,aACXC,OAAO,GAAD,OAAKR,EAAMS,SAAX,MACNC,MAAM,GAAD,OAAKV,EAAMS,SAAX,MACLE,gBAAgB,GAAD,OAAKX,EAAMY,WAE9BX,UAAS,sBACTY,aAAc,SAACC,GAAD,OAAOd,EAAMe,SAASf,EAAMgB,OAC1CC,YAAa,SAACH,GAAD,OAAOd,EAAMiB,YAAYH,EAAGd,EAAMgB,U,gBCuB5CE,EAhCG,SAAClB,GACf,IAAMmB,EAAaC,KAAKC,IAAIrB,EAAMsB,SAASZ,MAAOV,EAAMsB,SAASd,OAAS,IAEpEC,EAAWW,KAAKG,MAAMJ,EAAanB,EAAMwB,MAEzCC,EAAUL,KAAKM,IAAIP,EAAYV,EAAWT,EAAMwB,MAElDG,EAAO3B,EAAM4B,UAAUC,KAAI,SAACC,EAAOC,GAAR,OAC3B,cAAC,EAAD,CACItB,SAAUA,EACVU,WAAYA,EACZP,SAAUkB,EACVd,KAAMe,EAENd,YAAajB,EAAMgC,UACnBjB,SAAUf,EAAMe,UAFXgB,MAMb,OACI,qBAAK9B,UAAS,wCAAmCgC,IAAQC,iBAAzD,SACI,qBACIjC,UAAS,eAAUgC,IAAQE,WAC3B7B,MAAO,CAAEE,OAAO,GAAD,OAAKiB,EAAL,MAAkBf,MAAM,GAAD,OAAKe,EAAL,OAF1C,SAKKE,OCvBXS,G,MAAiB,WACjBC,EAAkB,UAKlBC,EAAiB,CACrB,MACA,SACA,SACA,QACA,OACA,SACA,UA0IaC,MArIf,WAAgB,IAAD,EACuBC,mBAjBb,aAgBV,mBACNtC,EADM,KACMuC,EADN,OAGqBD,mBAAS,IAH9B,mBAGNZ,EAHM,KAGKc,EAHL,OAKiBF,mBAxBT,IAmBR,mBAKRG,EALQ,KAKEC,EALF,OAOmBJ,mBAASJ,GAP5B,mBAONxB,EAPM,KAOIiC,EAPJ,OASqBL,mBAASH,GAT9B,mBASNS,EATM,KASKC,EATL,OAWqBP,oBAAS,GAX9B,mBAWNR,EAXM,KAWKgB,EAXL,OAamBR,mBAAS,CACvC9B,MAAOuC,OAAOC,WACd1C,OAAQyC,OAAOE,cAfJ,mBAaN7B,EAbM,KAaI8B,EAbJ,KAkBbH,OAAOI,SAAW,WAChBD,EAAY,CAAE1C,MAAOuC,OAAOE,YAAa3C,OAAQyC,OAAOC,cAG1D,IAAMI,EAAgB,SAAC9B,EAAM+B,GAE3B,IADA,IAAMC,EAAe,IAAIC,MAAJ,SAAUjC,EAAQ,IAC9BkC,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IACvCF,EAAaE,GAAKH,EAEpB,OAAOC,GA0ET,OA7DAI,qBAAU,WACR,IAAMJ,EAAeF,EA5DF,GA4DgC1C,GACnD8B,EAAac,KACZ,CAAC5C,IA2DF,sBAAKX,UAAU,MAAf,UAEE,cAAC,EAAD,CACE4D,QA5DiB,SAACrC,GACtBoB,EAAYpB,GACZ,IAAMgC,EAAeF,EAAc9B,EAAMZ,GACzC8B,EAAac,IA0DThC,KAAMmB,EACNmB,SAAUhB,EACViB,iBAAkBnD,EAClBV,WAAYA,EACZE,aA3CN,SAA0B4D,GAExB,IAAIR,EAkBJ,GAnBAf,EAAcuB,GAEE,cAAZA,IACFjB,EAAaV,GACbQ,EAAYT,GACZoB,EAAeF,EAAcX,IAGf,YAAZqB,IACFjB,EAAaT,GACbO,EAAYT,GACZoB,EAAeF,EAAcX,IAGf,UAAZqB,IACFnB,EAAYT,GACZW,EAAaX,GACboB,EAAeF,EAAcX,EAAUP,IAEzB,UAAZ4B,EAAqB,CAEvB,IAAIrB,EAAWsB,OAAO,4BAGtB,IAFArB,EAAYD,GACZa,EAAeF,EAAcX,EAAUP,GAChC8B,MAAMvB,IAAaA,EAAW,KAAOA,EAAW,IACrDwB,MAAM,wCACNxB,EAAWsB,OAAO,4BAGtBvB,EAAac,MAeX,cAAC,EAAD,CACE5B,UAAWA,EACXJ,KAAMmB,EACN/B,SAAUA,EACVoB,UAjEmB,SAAClB,EAAGsD,GAC3BtD,EAAEuD,iBACFrB,GAAa,GACb,IAAMQ,EAAe5B,EACrB4B,EAAaY,GAAOtB,EACpBJ,EAAac,IA6DTzC,SAzDsB,SAACqD,GACvBpC,GA/BkB,SAACD,GACvB,IAAMyB,EAAY,YAAO5B,GAEzB4B,EAAazB,GACI,YAAf7B,EACIoC,EAAelB,KAAKkD,MAAsB,EAAhBlD,KAAKmD,WAC/BzB,EACNJ,EAAac,GAyBXgB,CAAgBJ,IAwDd9C,SAAUA,IAEZ,8BACE,wBAAQrB,UAAS,6CAAjB,SACE,qDACE,uBADF,mCC7IVwE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c4d9f15a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SketchContainer\":\"sketchpad_SketchContainer__216C3\",\"Sketchpad\":\"sketchpad_Sketchpad__1rhGQ\"};","import React from \"react\";\r\nimport \"./controls.css\"\r\n\r\n\r\nconst Controls = (props) => {\r\n    return (\r\n        <div>\r\n            <h3 className={`card-header text-center bg-dark  text-light`}>Eth-A-Sketch app</h3>\r\n\r\n            <div className={`d-flex justify-content-center bg-dark p-2`}>\r\n                <ul className={`nav nav-pills flex-column flex-md-row `}>\r\n                    <li className={`nav-item`}>\r\n                        <button\r\n                            className={`btn btn-warning text-white ${props.colourMode === \"grayscale\" ? \"active\" : \"\"\r\n                                } `}\r\n                            onClick={() => {\r\n                                props.setColorMode(\"grayscale\");\r\n                            }}\r\n                        >\r\n                            Grayscale\r\n                        </button>\r\n                    </li>\r\n                    <li className={`nav-item`}>\r\n                        <button\r\n                            className={`btn btn-warning text-white ${props.colourMode === \"rainbow\" ? \"active\" : \"\"\r\n                                } `}\r\n                            onClick={() => {\r\n                                props.setColorMode(\"rainbow\");\r\n                            }}\r\n                        >\r\n                            Rainbow\r\n                        </button>\r\n                    </li>\r\n                    <li className={`nav-item`}>\r\n                        <button\r\n                            className={`btn btn-warning text-white ${props.colourMode === \"reset\" ? \"active\" : \"\"\r\n                                } `}\r\n                            onClick={() => {\r\n                                props.setColorMode(\"reset\");\r\n                            }}>\r\n                            reset\r\n                        </button>\r\n                    </li>\r\n                    <li className={`nav-item`}>\r\n                        <button\r\n                            className={`btn btn-warning text-white ${props.colourMode === \"clear\" ? \"active\" : \"\"\r\n                                } `}\r\n                            onClick={() => {\r\n                                props.setColorMode(\"clear\");\r\n                            }}>\r\n                            clear\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\n\r\nconst cell = (props) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                boxSizing: \"border-box\",\r\n                height: `${props.cellSize}px`,\r\n                width: `${props.cellSize}px`,\r\n                backgroundColor: `${props.bgColour}`,\r\n            }}\r\n            className={`border border-light`}\r\n            onMouseEnter={(e) => props.setColor(props.keys)}\r\n            onMouseOver={(e) => props.onMouseOver(e, props.keys)}\r\n        ></div>\r\n    );\r\n};\r\n\r\nexport default cell;\r\n","import React from \"react\";\r\nimport Cell from \"../Cell/cell\";\r\nimport classes from \"./sketchpad.module.css\";\r\n\r\nconst sketchpad = (props) => {\r\n    const sketchSize = Math.min(props.portSize.width, props.portSize.height - 50);\r\n\r\n    const cellSize = Math.round(sketchSize / props.size);\r\n\r\n    const divSize = Math.max(sketchSize, cellSize * props.size);\r\n\r\n    let grid = props.pixelData.map((pixel, idx) => (\r\n        <Cell\r\n            cellSize={cellSize}\r\n            sketchSize={sketchSize}\r\n            bgColour={pixel}\r\n            keys={idx}\r\n            key={idx}\r\n            onMouseOver={props.mouseOver}\r\n            setColor={props.setColor}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div className={`d-flex justify-content-center ${classes.SketchContainer}`}>\r\n            <div\r\n                className={`my-3 ${classes.Sketchpad}`}\r\n                style={{ height: `${divSize}px`, width: `${divSize}px` }}\r\n\r\n            >\r\n                {grid}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default sketchpad;\r\n","\nimport Controls from \"./Components/Controls/controls\";\nimport Sketchpad from \"./Components/Sketchpad/sketchpad\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst INIT_GRID_SIZE = 32;\nconst INIT_BG_COLOUR = \"#dbdbdb\";\nconst INIT_PEN_COLOUR = \"#383838\";\nconst INIT_COLOUR_MODE = \"grayscale\";\n\n\n\nconst rainbow_colors = [\n  \"red\",\n  \"orange\",\n  \"yellow\",\n  \"green\",\n  \"blue\",\n  \"indigo\",\n  \"violet\",\n];\n\n\n\nfunction App() {\n  const [colourMode, setColourMode] = useState(INIT_COLOUR_MODE);\n\n  const [pixelData, setPixelData] = useState([]);\n\n  let [gridSize, setGridSize] = useState(INIT_GRID_SIZE);\n\n  const [bgColour, setBgColour] = useState(INIT_BG_COLOUR);\n\n  const [penColour, setPenColour] = useState(INIT_PEN_COLOUR);\n\n  const [mouseOver, setMouseOver] = useState(false);\n\n  const [portSize, setPortSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  window.onresize = () => {\n    setPortSize({ width: window.innerHeight, height: window.innerWidth })\n  };\n\n  const initPixelData = (size, colour) => {\n    const newPixelData = new Array(size ** 2);\n    for (let i = 0; i < newPixelData.length; i++) {\n      newPixelData[i] = colour;\n    }\n    return newPixelData;\n  };\n\n  const updatePixelData = (idx) => {\n    const newPixelData = [...pixelData];\n\n    newPixelData[idx] =\n      colourMode === \"rainbow\"\n        ? rainbow_colors[Math.floor(Math.random() * 6)]\n        : penColour;\n    setPixelData(newPixelData);\n  };\n\n  useEffect(() => {\n    const newPixelData = initPixelData(INIT_GRID_SIZE, bgColour);\n    setPixelData(newPixelData);\n  }, [bgColour]);\n\n  const setSizeHandler = (size) => {\n    setGridSize(size);\n    const newPixelData = initPixelData(size, bgColour);\n    setPixelData(newPixelData);\n  };\n\n  const mouseOverHandler = (e, key) => {\n    e.preventDefault();\n    setMouseOver(true);\n    const newPixelData = pixelData;\n    newPixelData[key] = penColour;\n    setPixelData(newPixelData);\n  };\n\n\n  const setCellColorHandler = (key) => {\n    if (mouseOver) {\n      updatePixelData(key);\n    }\n  };\n\n\n  function changeColourMode(newMode) {\n    setColourMode(newMode);\n    let newPixelData;\n    if (newMode === \"grayscale\") {\n      setPenColour(INIT_PEN_COLOUR);\n      setBgColour(INIT_BG_COLOUR);\n      newPixelData = initPixelData(gridSize);\n    }\n\n    if (newMode === \"rainbow\") {\n      setPenColour(rainbow_colors);\n      setBgColour(INIT_BG_COLOUR);\n      newPixelData = initPixelData(gridSize);\n    }\n\n    if (newMode === \"clear\") {\n      setBgColour(INIT_BG_COLOUR)\n      setPenColour(INIT_BG_COLOUR)\n      newPixelData = initPixelData(gridSize, INIT_BG_COLOUR);\n    }\n    if (newMode === \"reset\") {\n\n      let gridSize = prompt(\"Please enter your number\");\n      setGridSize(gridSize);\n      newPixelData = initPixelData(gridSize, INIT_BG_COLOUR);\n      while (isNaN(gridSize) || gridSize > 100 || gridSize < 16) {\n        alert(\"choose betweem 16-100! only numbers!\");\n        gridSize = prompt(\"Please enter your number\");\n      }\n    }\n    setPixelData(newPixelData);\n\n  }\n\n  return (\n    <div className=\"App\">\n\n      <Controls\n        setSize={setSizeHandler}\n        size={gridSize}\n        penColor={penColour}\n        backgroundColour={bgColour}\n        colourMode={colourMode}\n        setColorMode={changeColourMode}\n      />\n      <Sketchpad\n        pixelData={pixelData}\n        size={gridSize}\n        bgColour={bgColour}\n        mouseOver={mouseOverHandler}\n        setColor={setCellColorHandler}\n        portSize={portSize}\n      />\n      <div>\n        <footer className={`page-footer text-center bg-dark text-light`}>\n          <p> © 2021 Copyright\n            <br />\n            designed by niloofar </p>\n        </footer>\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}